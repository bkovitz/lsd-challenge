Wed Mar 19 2025

A tiny term-rewriting system that does nothing but complete the New World in
the pons asinorum. It should reduce this:

  NewWorld[Seq[i j k] Blank]

to this:

  NewWorld[Seq[i j k] Seq[i j l]]

and it should work for any successor run, starting from any letter and running
any number of positions. For anything else, though, it should fail to reduce.

  NewWorld[Run[...α] Blank] -> NewWorld[Run[...α] AdvanceLast[...α]]

  Seq[A $Succ[A] ...α] -> Seq[Run[A Succ[A]] ...α]

  Seq[Run[...α A] $Succ[A] ...β] -> Seq[Run[...α A Succ[A]] ...β]

  Seq[Run[...α]] -> Run[...α]

  AdvanceLast[...α A] -> Seq[...α Succ[A]]

We might need to say $Succ[A] in the lhs of the rules above, because we need to
force a reduction from whatever letter is there to Succ[A].


Tue Mar 18 2025

Some possible term-rewriting rules to paint a canvas:

  Paint[
    Chunk[
      Seq[Run[L -> Succ]]
      Length[5]
      FirstItem[a]]
    Blank]

should reduce to something like:

  Painted[Seq[a b c d e]]

Some rules that might accomplish the painting:

     Paint[Chunk[FirstItem[X] ...α] Seq[_ ...β]]
  -> Paint[Chunk[...α]              Seq[X ...β]]

  Notice that FirstItem is removed, indicating that this part of the job
  is done.

     Paint[Chunk[Length[N] ...α] Blank]
  -> Paint[Chunk[...α]           Seq(repeat _ N)]

     Paint[Chunk[Seq[Run[RULE]] ...α] Seq[...β _ L ...γ]]
  -> Paint[          ''               Seq[...β FillPairFromRun[RULE 'L L] ...γ]]

  Notice that the first L is quoted. What we really need here is a fresh variable.
  Maybe (fresh 'L) would do it

     FillPairFromRun[L -> R[L] X Y]
  -> Seq[X Y] substitute SubstFromRule[R[X] -> Y]

  Notice that we need a special operator, 'substitute', that calls a function
  that's "under the hood" of the term-rewriting system.

     SubstFromRule[RULE]
  -> pmatch(R compatibleRule(R))

  Notice two more under-the-hood function calls. SubstFromRule reduces to a
  substitution, i.e. a function mapping variables to values.
