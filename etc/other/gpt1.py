#!/usr/bin/env python3

"""
(Generated by ChatGPT. Doesn't work.)

A simple symbolic expression evaluator in Python.

Usage:
>>> expr = Sum(Variable('x'), Variable('y'))
>>> expr.derivative()
Sum(Constant(1), Constant(1))
"""


class Expr:
    def derivative(self):
        raise NotImplementedError("This method should be overridden by subclasses")

    def __str__(self):
        raise NotImplementedError("This method should be overridden by subclasses")


class Constant(Expr):
    def __init__(self, value):
        self.value = value

    def derivative(self):
        return Constant(0)

    def __str__(self):
        return str(self.value)


class Variable(Expr):
    def __init__(self, name):
        self.name = name

    def derivative(self):
        return Constant(1)

    def __str__(self):
        return self.name


class Sum(Expr):
    def __init__(self, *terms):
        self.terms = terms

    def derivative(self):
        return Sum(*(term.derivative() for term in self.terms))

    def __str__(self):
        return " + ".join(str(term) for term in self.terms)


class Product(Expr):
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def derivative(self):
        # Product rule: (uv)' = u'v + uv'
        return Sum(
            Product(self.a.derivative(), self.b), Product(self.a, self.b.derivative())
        )

    def __str__(self):
        return f"({self.a} * {self.b})"


class Power(Expr):
    def __init__(self, base, exponent):
        self.base = base
        self.exponent = exponent

    def derivative(self):
        # Power rule: (x^n)' = n * x^(n-1) * x'
        return Product(
            Constant(self.exponent),
            Product(Power(self.base, self.exponent - 1), self.base.derivative()),
        )

    def __str__(self):
        return f"({self.base}^{self.exponent})"


if __name__ == "__main__":
    # Example: Calculate the derivative of f(x) = 3x^2 + 2x + 1
    f = Sum(
        Product(Constant(3), Power(Variable("x"), 2)),
        Product(Constant(2), Variable("x")),
        Constant(1),
    )

    print("Function:", f)
    print("Derivative:", f.derivative())
