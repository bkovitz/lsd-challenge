* parser
parsing is accomplished by a simple parse method defined in `parser.py`

* terms
** Var(name: Term, none: bool, many: bool)
instead of using `Splice`s, Vars use the `many` flag.
** Node
this is an expression represented by `Head[a b c]`
** Seq
this is a tuple
* trs
** Method
these are Nodes that evaluate their body with python.
example:
- `Succ[a]` = `b`
- `Last[abc]` = `c`
- ...
Methods are defined in `methods.py`
** pmatch(pattern, template, env)
pmatch simply binds variables to an Env (a dict).
- if there is no match, it returns None
- if there is a match, it returns an Env
- if the match contains variables, variables are stored in the Env
** substitute(template, env)
if a template has variables, substitute simply loads the variables into the template.
otherwise, it just returns the template

* testing
- using `pytest`, but should be backwards-compatible with unittest.
- added several helper methods like self.assertMatch, self.assertRewrite, etc.
